// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	datastruct "dryve/internal/datastruct"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// FileQuery is an autogenerated mock type for the FileQuery type
type FileQuery struct {
	mock.Mock
}

// Create provides a mock function with given fields: UUID, Name, Size, Filename
func (_m *FileQuery) Create(UUID string, Name string, Size int64, Filename string) (datastruct.File, error) {
	ret := _m.Called(UUID, Name, Size, Filename)

	var r0 datastruct.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int64, string) (datastruct.File, error)); ok {
		return rf(UUID, Name, Size, Filename)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64, string) datastruct.File); ok {
		r0 = rf(UUID, Name, Size, Filename)
	} else {
		r0 = ret.Get(0).(datastruct.File)
	}

	if rf, ok := ret.Get(1).(func(string, string, int64, string) error); ok {
		r1 = rf(UUID, Name, Size, Filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: UUID
func (_m *FileQuery) Delete(UUID string) error {
	ret := _m.Called(UUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(UUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: UUID
func (_m *FileQuery) Get(UUID string) (datastruct.File, error) {
	ret := _m.Called(UUID)

	var r0 datastruct.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (datastruct.File, error)); ok {
		return rf(UUID)
	}
	if rf, ok := ret.Get(0).(func(string) datastruct.File); ok {
		r0 = rf(UUID)
	} else {
		r0 = ret.Get(0).(datastruct.File)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(UUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchByDateRange provides a mock function with given fields: from, to
func (_m *FileQuery) SearchByDateRange(from time.Time, to time.Time) ([]datastruct.File, error) {
	ret := _m.Called(from, to)

	var r0 []datastruct.File
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) ([]datastruct.File, error)); ok {
		return rf(from, to)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []datastruct.File); ok {
		r0 = rf(from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastruct.File)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFileQuery interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileQuery creates a new instance of FileQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileQuery(t mockConstructorTestingTNewFileQuery) *FileQuery {
	mock := &FileQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
